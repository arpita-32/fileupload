{"version":3,"sources":["fileUpload.js"],"names":["File","require","cloudinary","v2","exports","localFileUpload","req","res","file","files","console","log","path","__dirname","Date","now","name","split","mv","err","error","status","json","success","message","isFileTypeSupported","type","supportedTypes","includes","uploadFileToCloudinary","folder","quality","options","resource_type","timeout","tempFilePath","uploader","upload","response","imageUpload","body","tags","email","imageFile","fileType","toLowerCase","create","imageUrl","secure_url","fileData","videoUpload","videoFile","videoUrl","imageSizeReducer"],"mappings":"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","sourcesContent":["const File = require(\"../models/File\");\nconst cloudinary = require(\"cloudinary\").v2;\n\nexports.localFileUpload = async (req, res) => {\n    try {\n        const file = req.files.file;\n        console.log(\"FILE ->\", file);\n\n        let path = __dirname + \"/files/\" + Date.now() + `.${file.name.split('.')[1]}`;\n        console.log(\"PATH-> \", path);\n\n        file.mv(path, (err) => {\n            if (err) {\n                console.error(err);\n                return res.status(500).json({\n                    success: false,\n                    message: 'Error in file upload'\n                });\n            }\n        });\n\n        res.json({\n            success: true,\n            message: 'Local file upload successfully'\n        });\n    } catch (error) {\n        console.error(\"Not able to upload the file on server:\", error);\n        res.status(500).json({\n            success: false,\n            message: 'Server error in file upload'\n        });\n    }\n}\n\nfunction isFileTypeSupported(type, supportedTypes) {\n    return supportedTypes.includes(type);\n}\n\nasync function uploadFileToCloudinary(file, folder, quality) {\n    try {\n        const options = {\n            folder,\n            resource_type: \"auto\",\n            timeout: 120000  // Increased timeout for larger files\n        };\n        \n        if (quality) {\n            options.quality = quality;\n        }\n\n        console.log('Uploading to Cloudinary with options:', options);\n        console.log('File temp path:', file.tempFilePath);\n        \n        const response = await cloudinary.uploader.upload(file.tempFilePath, options);\n        console.log('Cloudinary response:', response);\n        return response;\n    } catch (error) {\n        console.error(\"Error uploading to Cloudinary:\", error);\n        throw error;\n    }\n}\n\nexports.imageUpload = async (req, res) => {\n    try {\n        const { name, tags, email } = req.body;\n        console.log(name, tags, email);\n\n        const file = req.files.imageFile;\n        console.log(file);\n\n        const supportedTypes = [\"jpg\", \"jpeg\", \"png\"];\n        const fileType = file.name.split('.')[1].toLowerCase();\n\n        if (!isFileTypeSupported(fileType, supportedTypes)) {\n            return res.status(400).json({\n                success: false,\n                message: 'File format not supported'\n            });\n        }\n\n        const response = await uploadFileToCloudinary(file, \"Web\");\n        console.log(response);\n\n        const fileData = await File.create({\n            name,\n            tags,\n            email,\n            imageUrl: response.secure_url\n        });\n\n        res.json({\n            success: true,\n            imageUrl: response.secure_url,\n            message: 'Image successfully uploaded'\n        });\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({\n            success: false,\n            message: 'Something went wrong',\n            error: error.message\n        });\n    }\n}\n\nexports.videoUpload = async (req, res) => {\n    try {\n        const { name, tags, email } = req.body;\n        console.log(name, tags, email);\n\n        if (!req.files || !req.files.videoFile) {\n            return res.status(400).json({\n                success: false,\n                message: 'No video file uploaded'\n            });\n        }\n\n        const file = req.files.videoFile;\n        console.log('Video file:', file);\n\n        const supportedTypes = [\"mp4\", \"mov\"];\n        const fileType = file.name.split('.')[1].toLowerCase();\n\n        if (!isFileTypeSupported(fileType, supportedTypes)) {\n            return res.status(400).json({\n                success: false,\n                message: 'File format not supported'\n            });\n        }\n\n        const response = await uploadFileToCloudinary(file, \"Web\");\n        console.log('Cloudinary response:', response);\n\n        const fileData = await File.create({\n            name,\n            tags,\n            email,\n            imageUrl: response.secure_url\n        });\n\n        res.json({\n            success: true,\n            videoUrl: response.secure_url,\n            message: 'Video successfully uploaded'\n        });\n    } catch (error) {\n        console.error('Video upload error:', error);\n        res.status(500).json({\n            success: false,\n            message: 'Video upload failed',\n            error: error.message\n        });\n    }\n}\n\n\nexports.imageSizeReducer = async (req, res) => {\n    try {\n        const { name, tags, email } = req.body;\n        console.log(name, tags, email);\n\n        if (!req.files || !req.files.imageFile) {\n            return res.status(400).json({\n                success: false,\n                message: 'No image file uploaded'\n            });\n        }\n\n        const file = req.files.imageFile;\n        console.log('Image file:', file);\n\n        const supportedTypes = [\"jpg\", \"jpeg\", \"png\"];\n        const fileType = file.name.split('.')[1].toLowerCase();\n\n        if (!isFileTypeSupported(fileType, supportedTypes)) {\n            return res.status(400).json({\n                success: false,\n                message: 'File format not supported'\n            });\n        }\n\n        // Upload with compression\n        const response = await uploadFileToCloudinary(file, \"Web\", 30);\n        console.log('Cloudinary response:', response);\n\n        const fileData = await File.create({\n            name,\n            tags,\n            email,\n            imageUrl: response.secure_url\n        });\n\n        res.json({\n            success: true,\n            imageUrl: response.secure_url,\n            message: 'Image successfully uploaded with reduced size'\n        });\n    } catch (error) {\n        console.error('Image size reducer error:', error);\n        res.status(500).json({\n            success: false,\n            message: 'Image compression failed',\n            error: error.message\n        });\n    }\n}"],"file":"fileUpload.dev.js"}