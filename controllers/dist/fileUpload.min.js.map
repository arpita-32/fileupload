{"version":3,"sources":["fileUpload.js"],"names":["File","require","cloudinary","v2","message","type","supportedTypes","includes","uploadFileToCloudinary","file","folder","quality","options","response","regeneratorRuntime","async","_context2","prev","next","resource_type","timeout","isFileTypeSupported","console","log","tempFilePath","awrap","uploader","upload","sent","abrupt","t0","stop","exports","localFileUpload","req","res","path","_context","files","__dirname","Date","now","concat","name","split","mv","err","status","json","success","error","imageUpload","_req$body","tags","email","_context3","body","imageFile","create","imageUrl","secure_url","fileType","videoFile","toLowerCase","videoUrl","_context4","imageSizeReducer","_req$body3","_context5"],"mappings":"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","file":"fileUpload.min.js","sourcesContent":["const File = require(\"../models/File\");\nconst cloudinary = require(\"cloudinary\").v2;\n\nexports.localFileUpload = async (req, res) => {\n    try {\n        const file = req.files.file;\n        console.log(\"FILE ->\", file);\n\n        let path = __dirname + \"/files/\" + Date.now() + `.${file.name.split('.')[1]}`;\n        console.log(\"PATH-> \", path);\n\n        file.mv(path, (err) => {\n            if (err) {\n                console.error(err);\n                return res.status(500).json({\n                    success: false,\n                    message: 'Error in file upload'\n                });\n            }\n        });\n\n        res.json({\n            success: true,\n            message: 'Local file upload successfully'\n        });\n    } catch (error) {\n        console.error(\"Not able to upload the file on server:\", error);\n        res.status(500).json({\n            success: false,\n            message: 'Server error in file upload'\n        });\n    }\n}\n\nfunction isFileTypeSupported(type, supportedTypes) {\n    return supportedTypes.includes(type);\n}\n\nasync function uploadFileToCloudinary(file, folder, quality) {\n    try {\n        const options = {\n            folder,\n            resource_type: \"auto\",\n            timeout: 120000  // Increased timeout for larger files\n        };\n        \n        if (quality) {\n            options.quality = quality;\n        }\n\n        console.log('Uploading to Cloudinary with options:', options);\n        console.log('File temp path:', file.tempFilePath);\n        \n        const response = await cloudinary.uploader.upload(file.tempFilePath, options);\n        console.log('Cloudinary response:', response);\n        return response;\n    } catch (error) {\n        console.error(\"Error uploading to Cloudinary:\", error);\n        throw error;\n    }\n}\n\nexports.imageUpload = async (req, res) => {\n    try {\n        const { name, tags, email } = req.body;\n        console.log(name, tags, email);\n\n        const file = req.files.imageFile;\n        console.log(file);\n\n        const supportedTypes = [\"jpg\", \"jpeg\", \"png\"];\n        const fileType = file.name.split('.')[1].toLowerCase();\n\n        if (!isFileTypeSupported(fileType, supportedTypes)) {\n            return res.status(400).json({\n                success: false,\n                message: 'File format not supported'\n            });\n        }\n\n        const response = await uploadFileToCloudinary(file, \"Web\");\n        console.log(response);\n\n        const fileData = await File.create({\n            name,\n            tags,\n            email,\n            imageUrl: response.secure_url\n        });\n\n        res.json({\n            success: true,\n            imageUrl: response.secure_url,\n            message: 'Image successfully uploaded'\n        });\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({\n            success: false,\n            message: 'Something went wrong',\n            error: error.message\n        });\n    }\n}\n\nexports.videoUpload = async (req, res) => {\n    try {\n        const { name, tags, email } = req.body;\n        console.log(name, tags, email);\n\n        if (!req.files || !req.files.videoFile) {\n            return res.status(400).json({\n                success: false,\n                message: 'No video file uploaded'\n            });\n        }\n\n        const file = req.files.videoFile;\n        console.log('Video file:', file);\n\n        const supportedTypes = [\"mp4\", \"mov\"];\n        const fileType = file.name.split('.')[1].toLowerCase();\n\n        if (!isFileTypeSupported(fileType, supportedTypes)) {\n            return res.status(400).json({\n                success: false,\n                message: 'File format not supported'\n            });\n        }\n\n        const response = await uploadFileToCloudinary(file, \"Web\");\n        console.log('Cloudinary response:', response);\n\n        const fileData = await File.create({\n            name,\n            tags,\n            email,\n            imageUrl: response.secure_url\n        });\n\n        res.json({\n            success: true,\n            videoUrl: response.secure_url,\n            message: 'Video successfully uploaded'\n        });\n    } catch (error) {\n        console.error('Video upload error:', error);\n        res.status(500).json({\n            success: false,\n            message: 'Video upload failed',\n            error: error.message\n        });\n    }\n}\n\n\nexports.imageSizeReducer = async (req, res) => {\n    try {\n        const { name, tags, email } = req.body;\n        console.log(name, tags, email);\n\n        if (!req.files || !req.files.imageFile) {\n            return res.status(400).json({\n                success: false,\n                message: 'No image file uploaded'\n            });\n        }\n\n        const file = req.files.imageFile;\n        console.log('Image file:', file);\n\n        const supportedTypes = [\"jpg\", \"jpeg\", \"png\"];\n        const fileType = file.name.split('.')[1].toLowerCase();\n\n        if (!isFileTypeSupported(fileType, supportedTypes)) {\n            return res.status(400).json({\n                success: false,\n                message: 'File format not supported'\n            });\n        }\n\n        // Upload with compression\n        const response = await uploadFileToCloudinary(file, \"Web\", 30);\n        console.log('Cloudinary response:', response);\n\n        const fileData = await File.create({\n            name,\n            tags,\n            email,\n            imageUrl: response.secure_url\n        });\n\n        res.json({\n            success: true,\n            imageUrl: response.secure_url,\n            message: 'Image successfully uploaded with reduced size'\n        });\n    } catch (error) {\n        console.error('Image size reducer error:', error);\n        res.status(500).json({\n            success: false,\n            message: 'Image compression failed',\n            error: error.message\n        });\n    }\n}"]}